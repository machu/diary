---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { normalizeTag } from "@/lib/tags";
import { buildEntryUrl, toDisplayDate } from "@/lib/dates";
import TagBadges from "@/components/TagBadges.astro";

/**
 * タグ詳細ページ（/tags/:tag）
 * - タグは normalizeTag でトリム＋小文字化したスラグ
 * - getStaticPaths で全投稿からタグ集合を構築
 */
export async function getStaticPaths() {
  const all = await getCollection("posts");
  const tags = new Set<string>();
  for (const p of all) for (const t of p.data.tags ?? []) tags.add(normalizeTag(t));
  return Array.from(tags).map((t) => ({ params: { tag: t } }));
}

/** ルートパラメータのタグを正規化し、該当エントリを最新順で抽出 */
const tag = normalizeTag(Astro.params.tag!);
const posts = (await getCollection(
  "posts",
  (p) => (p.data.tags ?? []).some((t) => normalizeTag(t) === tag)
))
  .toSorted((a, b) => +b.data.date - +a.data.date);

// date helpers are provided by @/lib/dates
---
<BaseLayout title={`タグ: ${tag}`}>
  <h1 class="mb-4 text-xl font-semibold">タグ: {tag}</h1>
  <ul class="space-y-4">
    {posts.map((entry) => {
      const dateDisplay = toDisplayDate(entry.data.date);
      const url = buildEntryUrl(entry.data.date, entry.slug);
      const tags = entry.data.tags ?? [];
      return (
        <li>
          <div class="flex items-center justify-between gap-2">
            <a href={url} class="min-w-0 flex-1 hover:underline">
              <h2 class="truncate font-medium">{entry.data.title}</h2>
            </a>
            {tags.length > 0 && (
              <div class="shrink-0 flex flex-wrap gap-1 justify-end">
                <TagBadges tags={tags} />
              </div>
            )}
          </div>
          <p class="mt-1 text-xs text-muted-foreground">{dateDisplay}</p>
        </li>
      );
    })}
  </ul>
</BaseLayout>
