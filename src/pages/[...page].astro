---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { buildEntryUrl, toDisplayDate } from "@/lib/dates";
import { PAGE_SIZE } from "@/lib/constants";
import TagBadges from "@/components/TagBadges.astro";

/**
 * トップページ（最新エントリのページネーション）
 * - getStaticPaths で全投稿を最新順に分割し、"/", "/2" ... の静的パスを生成
 * - 1ページあたりの件数は `PAGE_SIZE` を参照
 */
export async function getStaticPaths() {
  const all = await getCollection("posts");
  // Sort newest first by frontmatter date
  const posts = all.toSorted((a, b) => +b.data.date - +a.data.date);
  const pageSize = PAGE_SIZE;
  const pages = Math.max(1, Math.ceil(posts.length / PAGE_SIZE));
  return Array.from({ length: pages }, (_, i) => ({
    // For catch-all routes, params values must be string/number/undefined
    // Use undefined for root ("/") and a string like "2" for "/2"
    params: { page: i === 0 ? undefined : String(i + 1) },
    props: {
      pageNum: i + 1,
      pageSize: PAGE_SIZE,
      total: posts.length,
      slice: posts.slice(i * PAGE_SIZE, (i + 1) * PAGE_SIZE),
    },
  }));
}

/** ページテンプレートへ渡されるプロパティ */
const { pageNum, pageSize, total, slice } = Astro.props as {
  pageNum: number;
  pageSize: number;
  total: number;
  slice: Awaited<ReturnType<typeof getCollection>>;
};

// common date helpers are provided by @/lib/dates
---
<BaseLayout title="まちゅダイアリー" description="最新エントリ">
  <h1 class="mb-4 text-xl font-semibold">最新エントリ</h1>
  <ul class="space-y-4">
    {slice.map((entry) => {
      const dateDisplay = toDisplayDate(entry.data.date);
      const url = buildEntryUrl(entry.data.date, entry.slug);
      const tags = entry.data.tags ?? [];
      return (
        <li>
          <div class="flex items-center justify-between gap-2">
            <a href={url} class="min-w-0 flex-1 hover:underline">
              <h2 class="truncate font-medium">{entry.data.title}</h2>
            </a>
            {tags.length > 0 && (
              <div class="shrink-0 flex flex-wrap gap-1 justify-end">
                <TagBadges tags={tags} />
              </div>
            )}
          </div>
          <p class="mt-1 text-xs text-muted-foreground">{dateDisplay}</p>
        </li>
      );
    })}
  </ul>

  <nav class="mt-8 flex items-center justify-between text-sm">
    {pageNum > 1 ? (
      <a href={pageNum === 2 ? "/" : `/${pageNum - 1}`} class="hover:underline">← 前のページ</a>
    ) : <span />}
    <span>Page {pageNum} / {Math.max(1, Math.ceil(total / pageSize))}</span>
    {pageNum * pageSize < total ? (
      <a href={`/${pageNum + 1}`} class="hover:underline">次のページ →</a>
    ) : <span />}
  </nav>
</BaseLayout>
